<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Eneko Bikandi]]></title><description><![CDATA[Neure tontokerixak]]></description><link>https://enekobi.netlify.app</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 06 Feb 2021 12:24:43 GMT</lastBuildDate><item><title><![CDATA[Be aware of canaries (and dinosaurs)]]></title><description><![CDATA[When developing an app, be aware of any browser version. Oh, and also, look for a dinosaur that has come to life in the middle of 2020.]]></description><link>https://enekobi.netlify.app/posts/canaries-and-dinosaurs</link><guid isPermaLink="false">https://enekobi.netlify.app/posts/canaries-and-dinosaurs</guid><pubDate>Mon, 18 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/canary/canary.jpg&quot; alt=&quot;canary.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;Before starting talking about canaries, I would want to talk a bit about dinosaurs too. While I was gathering ideas for this post, a possible big release happened in the JS world and I would like to share it with you.&lt;/p&gt;
&lt;h2 id=&quot;introducing-deno-ü¶ï&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#introducing-deno-%F0%9F%A6%95&quot; aria-label=&quot;introducing deno ü¶ï permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introducing &lt;a href=&quot;https://deno.land/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Deno&lt;/a&gt; ü¶ï&lt;/h2&gt;
&lt;p&gt;If you‚Äôre familliar with &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Node&lt;/a&gt;, you should know that its creator, &lt;a href=&quot;https://tinyclouds.org/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Ryan Dahl&lt;/a&gt;, has been working these last years in another JavaScript backend environment which it‚Äôs called Deno. Writing about this would require a whole series of posts, so summarizing, its goal is to cover Node‚Äôs flaws with modern features whilst it encreases the security. If you want to check out more about Deno, you could check out &lt;a href=&quot;https://deno.land/v1&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;the post about its v1 release&lt;/a&gt; or you could check &lt;a href=&quot;https://www.freecodecamp.org/news/the-deno-handbook/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;this awesome Deno Handbook&lt;/a&gt; in &lt;a href=&quot;https://www.freecodecamp.org/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;freeCodeCamp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Time will say if it replaces Node or not. Probably, both will coexist. But I believe that is a tool worth keeping an eye at.&lt;/p&gt;
&lt;h2 id=&quot;back-to-canaries-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#back-to-canaries-&quot; aria-label=&quot;back to canaries  permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Back to canaries üê§&lt;/h2&gt;
&lt;p&gt;Lets get back to bussiness, in this case, frontend projects. When developing these, a first step is to set a list of supported browsers where the app needs to run propperly, and develop the app in way to do so. This requests to put special care in the tools and features we use to develop the app, because not all browsers support all the features, and writting a function in a way or another can make the code break in a certain browser-version. for example, it is commonly known the struggle of giving support to our old &lt;em&gt;friend&lt;/em&gt; Ie11, which is slowly seing how sites are stoping to support it. This week has been linkedin‚Äôs turn.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/canary/linkedin-ie11.png&quot; alt=&quot;linkedin-ie11&quot;&gt;&lt;/p&gt;
&lt;p&gt;Also, a browser can change the way it supports a feature or even drop it in a next version. So a common habit is to use a &lt;em&gt;Dev&lt;/em&gt; or &lt;em&gt;Canary&lt;/em&gt; browser-versions to be ahead of the changes, as these versions usually bring new and experimental features. For example, if your app uses 3rd party &lt;strong&gt;cookies&lt;/strong&gt;, you‚Äôd need to know how these cookies are going to behave after Chrome applies its &lt;a href=&quot;https://blog.chromium.org/2020/01/building-more-private-web-path-towards.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Privacy Sandbox&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But &lt;span style=&quot;font-weight: 700; color: red&quot;&gt;don‚Äôt take &lt;em&gt;Canaries&lt;/em&gt; as silver bullets&lt;/span&gt;. My point is, Canary versions, as they only meant for developers and testers, &lt;strong&gt;can be ahead in certain aspects but can be more poor in another ones&lt;/strong&gt;, as they don‚Äôt worry about stability as much as stable versions, which are meant to be used by the vast majority and hence, give the best and most stable user-experience.&lt;/p&gt;
&lt;p&gt;This has happened to us this week. As we develop apps that are run in iframes in our customers‚Äô sites, we have to be constantly managing 1st party vs 3rd party data, including cookies and local storage. So, despite testing in all the browsers from our supported list, &lt;strong&gt;we tend to use mainly &lt;em&gt;Chrome Canary&lt;/em&gt; or &lt;em&gt;Dev&lt;/em&gt; for developmnent&lt;/strong&gt; as it is 3 major versions ahead from the stable one and we can check all our features will continue running after the browser updates.&lt;/p&gt;
&lt;p&gt;But, we‚Äôve beein seeing a flickering in the content when our app resizes its parent iframe (don‚Äôt worry about this, we do it communicating via PostMessage with one of our scripts which is running in the customer‚Äôs site). So, as we tend to deliver our software with the best quality, we introduced some stories in our backlog to research this issue. At first, a team-mate spent a couple of days researching and refactoring our CSS trying to make it lighter, in order for the browser to parse it more efficiently. But it was not working.&lt;/p&gt;
&lt;p&gt;From my side, after some research, &lt;strong&gt;I discovered that it wasn‚Äôt something specific from our app&lt;/strong&gt;, because it was happening on any iframe. But I saw that &lt;strong&gt;the iframe was much more responsive when its content was in the first party&lt;/strong&gt; (setting the content programatically via JS) &lt;strong&gt;instead of being 3r party&lt;/strong&gt; (setting up it &lt;em&gt;src&lt;/em&gt; and letting the content being downloaded on its own). So, as a test and as a documentation for my research, I developed a small project where two iframes (one 3rd party and another one in 1st) could be resized on will. Here‚Äôs the code if you want to check it.&lt;/p&gt;
&lt;div style=&quot;display: grid; justify-items: center;&quot;&gt;
  &lt;iframe src=&quot;https://codesandbox.io/embed/resizing-iframe-performance-gfbgw?fontsize=14&amp;hidenavigation=1&amp;theme=dark&quot;
  style=&quot;width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;&quot;
  title=&quot;resizing-iframe-performance&quot;
  allow=&quot;accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr&quot;
  sandbox=&quot;allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;p&gt;In the project we could see how the 3rd party iframe (on the left) was flicking while the one in 1st party was not. The test was the proof that our app was behaving badly. But wait! After checking it in FireFox and in Edge, the 3rd party iframe was behaving quite better, and almost as stable as th 1st party one. So I was thinking that something was wrong here, &lt;em&gt;‚ÄúHow can Crome, being a browser that is almost the standard and with highest user acceptance ratio, be failing rendering this simple content, while its competitors work fine?‚Äù&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So, I went for &lt;strong&gt;Chrome Stable&lt;/strong&gt; and what was my surprise when the flickering dissappeared. The content was being rendered and resized smoothly, no matter if it was on a 3rd or a 1st party iframe. Here we can see the difference, the &lt;strong&gt;left gif corresponds to the app being run in &lt;em&gt;Chrome Dev&lt;/em&gt;&lt;/strong&gt; and the one on the &lt;strong&gt;right is being run in &lt;em&gt;Chrome Stable&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;div style=&quot;display: grid; grid-template-columns: 50% 50%; justify-items: center;&quot;&gt;
  &lt;div style=&quot;display: flex; flex-direction: column; border-right: solid 1px; padding: 0 5px 0 0;&quot;&gt;
  &lt;h4&gt;Dev/Canary&lt;/h4&gt;
  &lt;img src=&quot;/media/canary/resizing-dev.gif&quot;&gt;
  &lt;/div&gt;
   &lt;div style=&quot;display: flex; flex-direction: column; border-left: solid 1px; padding: 0 0 0 5px;&quot;&gt;
  &lt;h4&gt;Stable&lt;/h4&gt;
  &lt;img src=&quot;/media/canary/resizing-stable.gif&quot;&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&quot;conclussions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#conclussions&quot; aria-label=&quot;conclussions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conclussions&lt;/h2&gt;
&lt;p&gt;It seems that, despite having the latests features, &lt;strong&gt;the &lt;em&gt;Dev&lt;/em&gt; version does not care so much about rendering&lt;/strong&gt; content efficiently for the user. Once known, this can be logical as the &lt;em&gt;Dev&lt;/em&gt; version can be meant for developers to play with the latest features in the engine, but &lt;strong&gt;can be tricky if you are unaware of this and can make you lose some valueable time of yours&lt;/strong&gt;. That is the reason I marked in red not to consider them silver-bullets and think that as the app runs in a &lt;em&gt;Dev/Canary&lt;/em&gt; version, will run in the &lt;em&gt;Stable&lt;/em&gt; one, and viceversa.&lt;/p&gt;
&lt;p&gt;My recommendation is to &lt;strong&gt;not to take anything for granted, and test all you can&lt;/strong&gt; (with manual and automated tests) on each browser/environment you need. You know, better safe than sorry..&lt;/p&gt;
&lt;p&gt;Thanks for reading ;-)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Eastern Promises]]></title><description><![CDATA[Nope, it is not about the movie. Just pointing the clear difference between JS promises and async/await.]]></description><link>https://enekobi.netlify.app/posts/eastern-promises</link><guid isPermaLink="false">https://enekobi.netlify.app/posts/eastern-promises</guid><pubDate>Mon, 27 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/promises/promise.jpg&quot; alt=&quot;promise.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;This week I‚Äôve changed the topic and I wanted to stay a bit away from frameworks and stuff. In my opinion, a dev can domain all the tools and frameworks he/she wants but it‚Äôs mandatory to know the basics. Currently, we can learn to build web-apps in nothing, reading the Quick-start guide from whatever framework and letting the tool do the magic for us, rendering this or injecting that dependency. But &lt;strong&gt;understanding a language&lt;/strong&gt; will bring us the ability to go one step further as this knowledge will be agnostic from frameworks.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I am just a weird guy building simple websites.&lt;br&gt;&lt;br&gt;No React&lt;br&gt;No Vue&lt;br&gt;No frontend framework &lt;br&gt;No SASS&lt;br&gt;No TypeScript&lt;br&gt;No Grunt&lt;br&gt;&lt;br&gt;Just HTML and CSS. &lt;br&gt;&lt;br&gt;Like a psychopath.&lt;/p&gt;&amp;mdash; Catalin Pit ü§ñ (@catalinmpit) &lt;a href=&quot;https://twitter.com/catalinmpit/status/1253980750778642436?ref_src=twsrc%5Etfw&quot;&gt;April 25, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;That will for understanding &lt;a href=&quot;https://stackoverflow.com/questions/20435653/what-is-vanillajs&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Vanilla flavours&lt;/a&gt; hit me some time ago and sometimes I invest time reviewing old topics or checking &lt;a href=&quot;https://www.freecodecamp.org/news/javascript-new-features-es2020/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;new proposals&lt;/a&gt;. So this week I felt like it was a good time to check some basic &lt;a href=&quot;https://nodejs.org/es/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Node&lt;/a&gt; stuff, reading some posts and reviewing some code.&lt;/p&gt;
&lt;h2 id=&quot;false-promises&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#false-promises&quot; aria-label=&quot;false promises permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;False promises&lt;/h2&gt;
&lt;p&gt;The thing is that, in a talk I saw, the speaker introduced the public to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;JavaScript Promises&lt;/a&gt;. I am not going to start explaining them deeply because &lt;em&gt;promises&lt;/em&gt; came some time ago to stay with us. Probably you have been working with them and you know them like the back of your hand. Also, it would not be strange if you have been in &lt;a href=&quot;https://medium.com/@pyrolistical/how-to-get-out-of-promise-hell-8c20e0ab0513&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;hell&lt;/a&gt; also. Or maybe you come from another language or you‚Äôre a just looking for guidance. In that case, there is plenty of awesome documentation about it, but this post is for you.&lt;/p&gt;
&lt;p&gt;The speaker introduced &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;&lt;em&gt;promise.then()&lt;/em&gt;&lt;/a&gt; as a step forward to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Callback_function&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;&lt;em&gt;callbacks&lt;/em&gt;&lt;/a&gt; just to move next to &lt;a href=&quot;https://javascript.info/async-await&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;async/await&lt;/a&gt;. The thing that got my attention is that &lt;strong&gt;the speaker was telling the attendees that both statements (&lt;em&gt;.then()&lt;/em&gt; and &lt;em&gt;async/await&lt;/em&gt;) are the same and they should always use the second one&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Well, that statement is false and that‚Äôs the reason for this post. Each one behaves differently and one can be better than the other depending on the needs. For better understanding you should know the &lt;a href=&quot;https://blog.teamtreehouse.com/javascript-concurrency&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;concurrency&lt;/a&gt; and &lt;a href=&quot;https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;event-loop &lt;/a&gt; but it is enough for you to know these two points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Async/await&lt;/em&gt; will block&lt;/strong&gt; the execution until the promise is fulfilled, so a second call won‚Äôt be able to be processed until the first one finishes.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;em&gt;.then()&lt;/em&gt;&lt;/strong&gt; statement is &lt;strong&gt;&lt;em&gt;non blocking&lt;/em&gt;&lt;/strong&gt;. It simply calls the promise and when resolved, rejected,‚Ä¶ it will call the related callback.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this example below you will be able to check both options clicking on each button. The app will perform 10 asynchronous calls. Each call will last randomly and when resolved, it will be logged in the console.&lt;/p&gt;
&lt;div style=&quot;display:flex;border: solid;border-radius: 10px;&quot;&gt;
&lt;iframe
     src=&quot;https://codesandbox.io/embed/wonderful-ptolemy-h9jde?autoresize=1&amp;expanddevtools=1&amp;fontsize=14&amp;theme=dark&quot;
     style=&quot;width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;&quot;
     title=&quot;asyncs vs thens&quot;
     allow=&quot;accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr&quot;
     sandbox=&quot;allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts&quot;
   &gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;strong&gt;result&lt;/strong&gt; is pretty clear.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With &lt;em&gt;async/await&lt;/em&gt;, each call wil block the thread until its fulfilled, so the &lt;strong&gt;output will be ordered&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;.then()&lt;/em&gt; will call them all and let them be resolved on their own to call each callback, giving us a &lt;strong&gt;totally random ouput&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, &lt;strong&gt;there is no silver-bullet and no statement is better than the other&lt;/strong&gt;. Thus, each has it use case and we should choose them carefully.&lt;/p&gt;
&lt;h2 id=&quot;conclussion&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#conclussion&quot; aria-label=&quot;conclussion permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conclussion&lt;/h2&gt;
&lt;p&gt;As we saw, we have plenty of use-cases for &lt;em&gt;Promise&lt;/em&gt;s and we even skipped the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;generators&lt;/a&gt;. Anyway, we have to have a clear understanding about their behaviour to choose one over another in our code depending on what we want to achieve. For example, &lt;em&gt;.then()&lt;/em&gt; can be great for &lt;strong&gt;handling requests in an API&lt;/strong&gt; (imagine blocking the thread each time our server needs to make some expensive calculation) and &lt;em&gt;async/await&lt;/em&gt; can be great when &lt;strong&gt;waiting for a call to finish is mandatory&lt;/strong&gt; for the rest of the algorithm or chaining multiple asynchronous calls and avoid the promise-hell (getting a user, then getting the posts related to the user, ‚Ä¶). It‚Äôs up to you. You choose ;-)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[We are live!]]></title><description><![CDATA[Site live! What better topic for the first post other than explaining why I need a site and how I "built" it.]]></description><link>https://enekobi.netlify.app/posts/we-are-live</link><guid isPermaLink="false">https://enekobi.netlify.app/posts/we-are-live</guid><pubDate>Sun, 19 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/alive/alive.jpg&quot; alt=&quot;alive.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;So, we‚Äôre live. I have been thinking from long ago to build my personal site just to have online presence and write sometimes about what I have researched or what other crazy idea has come to my mind (this happens to much I reckon). After putting it off and prioritizing any other thing, finally I decided to take the step.&lt;/p&gt;
&lt;p&gt;First of all, I want to explain my decision to use English on the site being &lt;a href=&quot;https://en.wikipedia.org/wiki/Basque_language&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Euskera&lt;/a&gt; my native and loved language. Sadly, Euskera is a minoritary language which is barely used out of the Basque Country so I had to choose another language just to make the site understandable to the people. Being English the most used (and I would say official) langugae used in IT, I thought that it was the better option. Although, in a future development I will give the site the option to be displayed in Euskera too.&lt;/p&gt;
&lt;p&gt;So, back to the site, the development has been pretty straighforward. The site has been developed using the JAMStack, specifically &lt;a href=&quot;https://www.gatsbyjs.org/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Gatsby&lt;/a&gt; and &lt;a href=&quot;https://www.netlify.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Netlify&lt;/a&gt;, apart from being deployed to &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;GitHub Pages&lt;/a&gt;. For the ones unfamiliar with this stack, I recommend to read the &lt;a href=&quot;https://www.netlify.com/oreilly-jamstack/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Modern Web Development on the JAMstack&lt;/a&gt;. Quite a handy book which can give you the idea why this stack is gainning usage over some more ‚Äútraditional‚Äù ones.&lt;/p&gt;
&lt;h2 id=&quot;gatsby&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#gatsby&quot; aria-label=&quot;gatsby permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gatsby&lt;/h2&gt;
&lt;p&gt;It is Static Site Generator based on React. Basically, a static site is a site which is rendered on the server (completely or partially) and served as HTML to the browser. This gives us the ability to serve very fast loading sites, and if they are powered by React, even better.&lt;/p&gt;
&lt;p&gt;Also, if you are familiar with the Wordpress Themes, Gatsby has a simillar concept called &lt;a href=&quot;https://www.gatsbyjs.org/starters/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;starters&lt;/a&gt;. It allows to create our site starting from a boilerplate with preinstalled &lt;a href=&quot;https://www.gatsbyjs.org/plugins/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;plugins&lt;/a&gt; without the need of creating one project from scratch. For example, for this site I used the &lt;a href=&quot;https://github.com/alxshelepenok/gatsby-starter-lumen&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Lumen Starter&lt;/a&gt; which comes almost with anything I needed this case and with a couple of tweaks, my site was ready to go.&lt;/p&gt;
&lt;h2 id=&quot;github-pages&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#github-pages&quot; aria-label=&quot;github pages permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GitHub Pages&lt;/h2&gt;
&lt;p&gt;What can I say about Github that anyone who works on IT does not know already? Nothing. This Git repository hosting platform has plenty of services and one of those is Github Pages. It gives us the chance to publish a site for each repo that is configured completely free. What better option to host my dev related site other than a dev related platform?&lt;/p&gt;
&lt;p&gt;Gatsby has a great documentation, and on one point tells how to configure to &lt;a href=&quot;https://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;deploy the site to GitHub Pages&lt;/a&gt;. Basically it relies on the &lt;a href=&quot;https://www.npmjs.com/package/gh-pages&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;gh-pages&lt;/a&gt; package to do the thing. For example, as I did not want to set any subdomain or anything and deploy to &lt;em&gt;enekobi.github.io&lt;/em&gt;, it was enough to add this command to my &lt;em&gt;package.json&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;deploy&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby clean &amp;amp;&amp;amp; gatsby build &amp;amp;&amp;amp; gh-pages -d public&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But wait, this step is tricky. My site is a &lt;strong&gt;&lt;em&gt;User Page&lt;/em&gt;&lt;/strong&gt;, GitHub specifies that &lt;strong&gt;‚ÄúUser pages must be built from the master branch.‚Äù&lt;/strong&gt; so if we deploy the page, the compiled site‚Äôs code will overwrite the codebase that is on the master branch and we &lt;strong&gt;could loose the code&lt;/strong&gt;. This issue can be problematic but once understood it can be sorted easily. It‚Äôs enough for us &lt;strong&gt;create another branch&lt;/strong&gt;, for example &lt;em&gt;gh-pages&lt;/em&gt;, and use it as a default for coding. The &lt;strong&gt;&lt;em&gt;master&lt;/em&gt; branch will only be used to host the generated site&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/alive/branches.png&quot; alt=&quot;branches.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;netlify&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#netlify&quot; aria-label=&quot;netlify permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Netlify&lt;/h2&gt;
&lt;p&gt;Ok, I have my site ready and I can put it online running a simple commmand any time I want to deploy a change. But, didn‚Äôt we learn sometime ago that anything that can be automated, should be that way? Maybe I am a bit lazy but running the &lt;code class=&quot;language-text&quot;&gt;deploy&lt;/code&gt; command takes some time and I don‚Äôt want to stare to my &lt;a href=&quot;https://ohmyz.sh/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Zsh&lt;/a&gt; window until it finishes.&lt;/p&gt;
&lt;p&gt;Luckily, Netlify has a &lt;a href=&quot;https://www.netlify.com/pricing/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;free plan&lt;/a&gt; which is pretty awesome and it cobbers all the needs of a little site, including CDNs and &lt;strong&gt;Continous Deployment&lt;/strong&gt;. After logging in, we can create a site in Netlify in multiple ways (I used their fantastic &lt;a href=&quot;https://docs.netlify.com/cli/get-started/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Netlify Cli&lt;/a&gt;) specifying a GitHub repo to fetch the code from it. Netlify will automatically create a CI/CD pipeline for us, so whenever you &lt;em&gt;push&lt;/em&gt; a change to the remote repo, Netlify will run the build and deploy the latest version live in one of it‚Äôs sites (for example &lt;a href=&quot;https://enekobi.netlify.app/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://enekobi.netlify.app/&lt;/a&gt;), which is awesome.&lt;/p&gt;
&lt;p&gt;But don‚Äôt forget that we want our page to be live on GitHub Pages, not only on Netlify. This will add another peculiarity too. The &lt;em&gt;gh-pages&lt;/em&gt; packages assumes that is run inside a GitHub repo, which is not when we run the deploy on a Netlify instance. This can be sorted out specifiying which &lt;strong&gt;repo&lt;/strong&gt; we want to deploy to using the &lt;a href=&quot;https://www.npmjs.com/package/gh-pages#options&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;&lt;em&gt;gh-pages&lt;/em&gt; options&lt;/a&gt;. Sadly, these options can not be configured using the CLI but we can set them introducing a &lt;em&gt;deploy.js&lt;/em&gt; script. Our case will be simply as this (note the &lt;em&gt;branch&lt;/em&gt; and the &lt;em&gt;repo&lt;/em&gt; options):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; ghpages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;gh-pages&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;path&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

ghpages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;public&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    branch&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;master&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    repo&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;https://github.com/enekobi/enekobi.github.io.git&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    user&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Eneko Bikandi&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      email&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;ebikandi001@gmail.com&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Successfully deployed to GitHub Pages&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then we only have to change our &lt;em&gt;deploy&lt;/em&gt; script from the &lt;em&gt;package.json&lt;/em&gt; to call the new &lt;em&gt;deploy.js&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;deploy&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby clean &amp;amp;&amp;amp; gatsby build &amp;amp;&amp;amp; node ./deploy.js&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, we only have to go to the &lt;strong&gt;Build &amp;#x26; Deploy&lt;/strong&gt; settings in our site‚Äôs Netlify dashboard and set the &lt;em&gt;Build Command&lt;/em&gt; in order to run the command we set to deploy to Github Pages.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/alive/netlify.png&quot; alt=&quot;netlify.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#conclusion&quot; aria-label=&quot;conclusion permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It has been a fun tiny project to dive a bit more in these technologies and the perfect excuse to finally build my site. Of course,i have left some TODOs and work from the future to improve the site, but it is nice start. Anyway, to keep the CI/CD pipeline simpler, for the final site I have &lt;strong&gt;removed the &lt;em&gt;gh-pages&lt;/em&gt; dependency&lt;/strong&gt; and used only the one from &lt;em&gt;Netlify&lt;/em&gt;, because it‚Äôs the simplest approach.&lt;/p&gt;
&lt;p&gt;I hope that you enjoyed the reading as much I enjoyed developing the project and hope I gave you the curiosity to play with these handy tools. From my side, I‚Äôll try to continue improving and let‚Äôs see if i can come up with more posts and keep improving the quality of those as I continue writing ;-)&lt;/p&gt;</content:encoded></item></channel></rss>