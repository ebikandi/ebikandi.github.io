{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/eastern-promises","result":{"data":{"markdownRemark":{"id":"e8fa854b-8757-5624-9c8a-5203c56d395d","html":"<p><img src=\"/media/promises/promise.jpg\" alt=\"promise.jpg\"></p>\n<p>This week Iâ€™ve changed the topic and I wanted to stay a bit away from frameworks and stuff. In my opinion, a dev can domain all the tools and frameworks he/she wants but itâ€™s mandatory to know the basics. Currently, we can learn to build web-apps in nothing, reading the Quick-start guide from whatever framework and letting the tool do the magic for us, rendering this or injecting that dependency. But <strong>understanding a language</strong> will bring us the ability to go one step further as this knowledge will be agnostic from frameworks.</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">I am just a weird guy building simple websites.<br><br>No React<br>No Vue<br>No frontend framework <br>No SASS<br>No TypeScript<br>No Grunt<br><br>Just HTML and CSS. <br><br>Like a psychopath.</p>&mdash; Catalin Pit ðŸ¤– (@catalinmpit) <a href=\"https://twitter.com/catalinmpit/status/1253980750778642436?ref_src=twsrc%5Etfw\">April 25, 2020</a></blockquote>\n<p>That will for understanding <a href=\"https://stackoverflow.com/questions/20435653/what-is-vanillajs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vanilla flavours</a> hit me some time ago and sometimes I invest time reviewing old topics or checking <a href=\"https://www.freecodecamp.org/news/javascript-new-features-es2020/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">new proposals</a>. So this week I felt like it was a good time to check some basic <a href=\"https://nodejs.org/es/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node</a> stuff, reading some posts and reviewing some code.</p>\n<h2 id=\"false-promises\" style=\"position:relative;\"><a href=\"#false-promises\" aria-label=\"false promises permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>False promises</h2>\n<p>The thing is that, in a talk I saw, the speaker introduced the public to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Promises</a>. I am not going to start explaining them deeply because <em>promises</em> came some time ago to stay with us. Probably you have been working with them and you know them like the back of your hand. Also, it would not be strange if you have been in <a href=\"https://medium.com/@pyrolistical/how-to-get-out-of-promise-hell-8c20e0ab0513\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hell</a> also. Or maybe you come from another language or youâ€™re a just looking for guidance. In that case, there is plenty of awesome documentation about it, but this post is for you.</p>\n<p>The speaker introduced <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>promise.then()</em></a> as a step forward to the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Callback_function\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>callbacks</em></a> just to move next to <a href=\"https://javascript.info/async-await\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">async/await</a>. The thing that got my attention is that <strong>the speaker was telling the attendees that both statements (<em>.then()</em> and <em>async/await</em>) are the same and they should always use the second one</strong>.</p>\n<p>Well, that statement is false and thatâ€™s the reason for this post. Each one behaves differently and one can be better than the other depending on the needs. For better understanding you should know the <a href=\"https://blog.teamtreehouse.com/javascript-concurrency\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">concurrency</a> and <a href=\"https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">event-loop </a> but it is enough for you to know these two points:</p>\n<ul>\n<li><strong><em>Async/await</em> will block</strong> the execution until the promise is fulfilled, so a second call wonâ€™t be able to be processed until the first one finishes.</li>\n<li>The <strong><em>.then()</em></strong> statement is <strong><em>non blocking</em></strong>. It simply calls the promise and when resolved, rejected,â€¦ it will call the related callback.</li>\n</ul>\n<p>In this example below you will be able to check both options clicking on each button. The app will perform 10 asynchronous calls. Each call will last randomly and when resolved, it will be logged in the console.</p>\n<div style=\"display:flex;border: solid;border-radius: 10px;\">\n<iframe\n     src=\"https://codesandbox.io/embed/wonderful-ptolemy-h9jde?autoresize=1&expanddevtools=1&fontsize=14&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"asyncs vs thens\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n</div>\n<p>The <strong>result</strong> is pretty clear.</p>\n<ul>\n<li>With <em>async/await</em>, each call wil block the thread until its fulfilled, so the <strong>output will be ordered</strong>.</li>\n<li><em>.then()</em> will call them all and let them be resolved on their own to call each callback, giving us a <strong>totally random ouput</strong>.</li>\n</ul>\n<p>Of course, <strong>there is no silver-bullet and no statement is better than the other</strong>. Thus, each has it use case and we should choose them carefully.</p>\n<h2 id=\"conclussion\" style=\"position:relative;\"><a href=\"#conclussion\" aria-label=\"conclussion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclussion</h2>\n<p>As we saw, we have plenty of use-cases for <em>Promise</em>s and we even skipped the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">generators</a>. Anyway, we have to have a clear understanding about their behaviour to choose one over another in our code depending on what we want to achieve. For example, <em>.then()</em> can be great for <strong>handling requests in an API</strong> (imagine blocking the thread each time our server needs to make some expensive calculation) and <em>async/await</em> can be great when <strong>waiting for a call to finish is mandatory</strong> for the rest of the algorithm or chaining multiple asynchronous calls and avoid the promise-hell (getting a user, then getting the posts related to the user, â€¦). Itâ€™s up to you. You choose ;-)</p>","fields":{"slug":"/posts/eastern-promises","tagSlugs":["/tag/node/","/tag/basics/"],"readingTime":{"text":"4 min read"}},"frontmatter":{"date":"2020-04-27","description":"Nope, it is not about the movie. Just pointing the clear difference between JS promises and async/await.","tags":["Node","Basics"],"title":"Eastern Promises","socialImage":"/media/promises/promise.jpg"}}},"pageContext":{"slug":"/posts/eastern-promises"}}}